//@CustomCode
namespace QTHungryDogs.AspMvc.Controllers.Base
{
    using Microsoft.AspNetCore.Mvc;
    using TAccessModel = QTHungryDogs.Logic.Entities.Base.Restaurant;
    using TViewModel = QTHungryDogs.AspMvc.Models.Base.Restaurant;
    using TFilterModel = QTHungryDogs.AspMvc.Models.Base.RestaurantFilter;
    using TAccessContract = QTHungryDogs.Logic.Contracts.Base.IRestaurantsAccess<QTHungryDogs.Logic.Entities.Base.Restaurant>;
    ///
    /// Generated by the developer
    ///
    public sealed partial class RestaurantInfosController : Controllers.FilterGenericController<TAccessModel, TViewModel, TFilterModel, TAccessContract>
    {
        ///
        /// Generated by the developer
        ///
        static RestaurantInfosController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        protected override string ControllerName => "RestaurantInfos";
        ///
        /// Generated by the developer
        ///
        public RestaurantInfosController(QTHungryDogs.Logic.Contracts.Base.IRestaurantsAccess<TAccessModel> other)
        : base(other)
        {
            Constructing();
            CheckSessionToken = false;
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        ///
        /// Generated by the developer
        ///
        protected override TViewModel ToViewModel(TAccessModel accessModel, ActionMode actionMode)
        {
            var handled = false;
            var result = default(TViewModel);
            BeforeToViewModel(accessModel, actionMode, ref result, ref handled);
            if (handled == false || result == null)
            {
                result = TViewModel.Create(accessModel);
            }
            AfterToViewModel(result, actionMode);
            return BeforeView(result, actionMode);
        }
        partial void BeforeToViewModel(TAccessModel accessModel, ActionMode actionMode, ref TViewModel? viewModel, ref bool handled);
        partial void AfterToViewModel(TViewModel viewModel, ActionMode actionMode);

        public override async Task<IActionResult> Index()
        {
            var modelCount = 0;
            var pageSize = DataAccess.MaxPageSize;
            var filter = SessionWrapper.Get<TFilterModel>(FilterName) ?? new TFilterModel();
            var orderBy = SessionWrapper.Get<string>(OrderByName) ?? string.Empty;
            var instanceAccess = DataAccess as Logic.Contracts.Base.IRestaurantsAccess<Logic.Entities.Base.Restaurant>;
            var accessModels = await instanceAccess!.QueryRestaurantInfos(filter.CreateEntityPredicate(), orderBy);
            var viewModels = AfterQuery(accessModels!).Select(e => ToViewModel(e, ActionMode.Index));

            modelCount = viewModels.Count();
            ViewBag.CanCreate = false;
            ViewBag.Filter = filter;
            ViewBag.OrderBy = orderBy;
            ViewBag.PageSize = pageSize;
            ViewBag.ModelCount = modelCount;
            return View(BeforeView(viewModels, ActionMode.Index)); ;
        }
        protected override Models.Base.Restaurant BeforeView(Models.Base.Restaurant viewModel, ActionMode actionMode)
        {
            if (viewModel.State != Logic.Modules.Common.RestaurantState.Locked)
            {
                var dayStamp = DateTime.Now.GetDayStamp();
                var instanceAccess = DataAccess as Logic.Contracts.Base.IRestaurantsAccess<Logic.Entities.Base.Restaurant>;
                var openingStates = instanceAccess!.CreateDayOpeningStates(viewModel.Id, DateTime.Now).Result;

                viewModel.OpeningStates = openingStates.Select(e => Models.OpeningState.FromToTime.Create(e)).ToArray();
            }
            return base.BeforeView(viewModel, actionMode);
        }

    }
}
